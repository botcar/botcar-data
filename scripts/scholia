import groovyx.net.http.*
import groovyx.net.http.HttpResponseException
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

import edu.harvard.chs.cite.CtsUrn

String contentType = "text/html"
response.setContentType(contentType)
response.setCharacterEncoding('UTF-8')
response.setHeader( "Access-Control-Allow-Origin", "*")

boolean done = false

def slurper = new groovy.json.JsonSlurper()

String urnStr = request.getParameter("urn")

CtsUrn urn

// guarantee that URN parameter is syntactically valid
try {
        urn = new CtsUrn(urnStr)
} catch (Exception e) {
        println "<error>${urnStr} is not a valid URN: ${e}</error>\n"
        done = true
}

String myPassage = urn.getRef()

String sparql = "@sparqls@"
String prefix = "prefix cts: <http://www.homermultitext.org/cts/rdf/>\nprefix cite: <http://www.homermultitext.org/cite/rdf/>\nprefix hmt: <http://www.homermultitext.org/hmt/rdf/>\nprefix citedata: <http://www.homermultitext.org/hmt/citedata/>\nprefix dcterms: <http://purl.org/dc/terms/>\nprefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nprefix  xsd: <http://www.w3.org/2001/XMLSchema#>\nprefix olo: <http://purl.org/ontology/olo/core#>"

/**
 * Submits an encoded query to the configured SPARQL endpoint,
 * and returns the reply.
 * @param acceptType MIME type to specify for reply.
 * @param query SPARQL query to submit.
 * @returns SPARQL reply, as a String.
 */
String getSparqlReply(String acceptType, String query) {
        String replyString
                def encodedQuery = URLEncoder.encode(query)
                def q = "@sparqls@query?query=${encodedQuery}"
                if (acceptType == "application/json") {
                        q +="&output=json"
                }

        def http = new HTTPBuilder(q)
                http.request( Method.GET, ContentType.TEXT ) { req ->
                        headers.Accept = acceptType
                                response.success = { resp, reader ->
                                        replyString = reader.text
                                }
                }
        return replyString
}

/** Formulates SPARQL query to retrieve an image-URN illustrating a CTS-URN

 * @param urn URN of the CTS-urn to be illustrated.
 * @param prefix SPARQL prefix statements to prepend to the query.
 * @returns A valid SPARQL query.
 */
String illustrationQuery(String textUrn, String prefix) {

        String reply = """
${prefix}

select distinct ?picture where {
        <${textUrn}> cite:illustratedBy ?picture .
}
"""
                return reply
}

/** Formulates SPARQL query to retrieve Scholia and their illustrating Img-ROIs
 * given a textual URN.
 * @param urn URN of the CTS-urn to be illustrated.
 * @param prefix SPARQL prefix statements to prepend to the query.
 * @returns A valid SPARQL query.
 */
String scholiaQuery(String textUrn, String prefix, String myPassage) {

        String reply = """
${prefix}

select ?edCites ?edPic ?scholia ?scholPic where {

<${textUrn}> cts:belongsTo ?work .
?edCites cts:belongsTo ?ms .
?scholia hmt:commentsOn ?edCites .

optional {
?edCites cite:illustratedBy ?edPic .
}
optional {
?scholia cite:illustratedBy ?scholPic .
}

filter (regex(str(?edCites),"urn:cts:greekLit:tlg0012.tlg001.[^:]+:${myPassage}\$","i"))

}
ORDER BY ?edCites 
"""
                return reply
}

if (!done){

String queryString;
queryString = illustrationQuery(urnStr, prefix);
textIllustrations = slurper.parseText(getSparqlReply("application/json", queryString))
scholiaFound = slurper.parseText(getSparqlReply("application/json",scholiaQuery(urnStr, prefix, myPassage)));

html.html {
        head {
                title("@projectlabel@: Scholia Reader")
                        link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
                        link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
                        script(type: "text/javascript", src : "js/jquery.min.js", "  ")
                        script(type: "text/javascript", src : "@citekit@", "  ")
        }

        body {

                header {

		  nav {
		    mkp.yield "@projectlabel@: "
		    
		    a(href : '@homeUrl@', "Home")
		  }
		  h2("@projectlabel@: Scholia Reader")
                }

                article {


    h2("${scholiaFound.results.bindings.size()} Scholia for ${myPassage}")

    String currentMs = ""

    scholiaFound.results.bindings.each { b ->
        if (b.edCites.value != currentMs){
            currentMs = b.edCites.value
            h3("Manuscript ${b.edCites.value}")
            blockquote(class: "cite-text", cite : "${b.edCites.value}", "${b.edCites.value}")

            queryString = illustrationQuery(urnStr, prefix);
            textIllustrations = slurper.parseText(getSparqlReply("application/json", queryString))
            textIllustrations.results.bindings.each { c ->
            blockquote(class: "cite-image", cite : "${c.picture.value}", "${c.picture.value}")
            h3("Scholia")
        }    
        }  
                div (class : "citekit-compare") {
                    //blockquote(class: "cite-text", cite : "${b.edCites.value}", "${b.edCites.value}")
                    if (b.scholia.value.substring(4,8) == 'cite'){
                            blockquote(class: "cite-collection", cite : "${b.scholia.value}", "${b.scholia.value}")
                    } else {
                            blockquote(class: "cite-text", cite : "${b.scholia.value}", "${b.scholia.value}")
                    }
                    if (b?.scholPic?.value){
                            blockquote(class: "cite-image", cite : "${b?.scholPic?.value}", "${b?.scholPic?.value}")
                    }
                }
        
    }    
        // citekit magic:
        ul (id: "citekit-sources") {
                li (class : "citekit-source cite-text citekit-default", id : "defaulttext", "@texts@") 
                li (class : "citekit-source cite-image citekit-default", id : "defaultimage", "data-image-w" : "2000",  "@images@" )
                li (class : "citekit-source cite-collection citekit-default", id : "defaultcollection", "@collections@" )
        }
}
                footer("@htmlfooter@")
        }
}
}


